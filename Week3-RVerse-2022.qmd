---
title: "RVerse Week 3"
format:
  revealjs: 
    theme: serif
title-slide-attributes:
  footertext: hellow
---

## What kinds of projects are we talking about?

**Complex projects**

-   big tasks with lots of different stages
-   potentially many different team members and different needed skills
-   Often team projects but could also be a solo project
-   Examples: a large report or manuscript, a complex model, a software package, or an software application.

## What is agile?

::: columns
::: {.column width="50%"}
A **lightweight** workflow **structure** for software development which is characterized by 4 key features.

Traced back to the [Agile Manifesto](https://agilemanifesto.org/) written at a 2001 gathering of software development "visionaries", but the ideas trace back much earlier. Today agile methodologies are the norm in software development.
:::

::: {.column width="50%"}
1.  Rapid incremental and iterative development
2.  Open team culture - autonomous, highly communicative, empowered
3.  Team reflection and continual improvement
4.  Customer focus - early and frequent delivery of workable products
:::
:::

##

![](images/agile-elements-w-text.png){fig-align="center" width="80%"}


## What it is not: Waterfall

A detailed workflow from start to finish, years 1 to 4.

![](images/agile-waterfall.png){fig-align="center" height="40%"}


## Originating Ideas

![](images/agile-elements.png){fig-align="center" width="80%"}


## Industrial quality control

A key element of agile methodologies is iterative cycles, similar to the Plan-Do-Check-Act (PDCA) cycle:

![](images/PDCA-Multi-Loop.png){fig-align="center" width="80%"}

This was popularized by the work of **William Edwards Deming**<sup>1</sup> on how to design workflow and organizational systems that improve quality control.

::: footer
1 Leading thinker in statistical quality control and industrial engineering in the 1950s to 1980s.
:::

##

![](images/agile-deming.png){fig-align="center" width="80%"}


## Lean manufacturing

::: columns
::: {.column width="50%"}
![](images/toyota-way.jpeg){fig-align="center" width="80%"}
:::

::: {.column width="50%"}
Lean manufacturing refers to a profound change in the structure and culture of manufacturing teams to a flat hierarchy.
:::
:::

![](images/agile-toyota.png){fig-align="center" width="80%"}


## Rapid software application development theory

Lastly, agile is related to work in the 1980s on systems for rapid innovation for software application development (Barry Boehm, James Martin, James Kerr).

## Rapid software application development theory

::: columns
::: {.column width="50%"}
By definition, innovation is creating something novel so you can't write a plan to get to the "product" because you don't know what the product is. Because the customer (who you don't yet since you are developing something new) has never seen the product, the design process is organic and knowledge gained from the development process itself affects the design at each cycle.
:::

::: {.column width="50%"}
-   Rapid iterations with learning
-   Working demos (prototypes)
-   Tight collaboration with "customer"
-   Autonomous teams where members plan their own work and work their own plans.
:::
:::

##

![](images/agile-innovation.png){fig-align="center" width="80%"}


## Experiential learning

In "experiential learning" (David A Kolb, 1970s-1980s), the activity is the teacher via explicit periods of reflection and experimentation (trying something to fix the identified problem).

![](images/Kolb-stages.jpeg){fig-align="center" width="80%"}

##

![](images/agile-elements-w-text.png){fig-align="center" width="80%"}


# Agile methodologies


## Kanban

.center\[ <img src="images/Kanban_board_example.jpeg" width="75%"/>\]

------------------------------------------------------------------------

## Why use a Kanban board?

Visualize the flow of work so that we can improve it incrementally and organically--meaning no fixed framework. Just seeing your workflow helps you see the problems.

-   transparency -- visual representation of the team's workflow

-   iterative and incremental -- each task is a well-defined task (ca 1-2 days to move columns)

-   "workable product" -- minimize work in progress and **finish tasks before taking on new tasks** "WIP limits"

-   problems with task "flow" are addressed as they arise

-   No "sprints", time-boxed tasks, or time targets.

.footnote\[Atlassian has a nice Kanban video series: [intro](https://www.youtube.com/watch?v=iVaFVa7HYj4), [designing your Kanban board](https://www.youtube.com/watch?v=Bcid33tgq8A), [work in progress limits](https://www.youtube.com/watch?v=zEJn6eQO6FE), [writing kanban cards](https://www.youtube.com/watch?v=PxXdcQrPIUI) <br><br>\]

------------------------------------------------------------------------

## Kanban cards: aka the task card

Each project task lives on a card that gets edited as it moves. Team members can add comments and notes as it moves.

-   a description
-   deadline
-   assigned team member(s)
-   small: 1-2 days of work (not 1 hour)

------------------------------------------------------------------------

![](images/kanban-board-with-swimlanes.jpeg)

------------------------------------------------------------------------

## Example: NWFSC OA Lab

@Paul McElhany, NWFSC

![](images/github-pb-oa-example.png)

------------------------------------------------------------------------

## Kanban with GitHub

Let's Kanban with GitHub!

Note,

-   Kanban boards are often physical boards.
-   Lots of different applications for online Kanban boards.
-   Online versions allow you to link cards to "issues", e.g. GitHub issues.
