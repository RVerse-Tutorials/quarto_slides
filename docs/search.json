[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "today",
    "section": "",
    "text": "Misc Presentations\nClick Home link in lower right to get back to this page."
  },
  {
    "objectID": "co-work-oct-25.html#todays-theme",
    "href": "co-work-oct-25.html#todays-theme",
    "title": "Agile Oct 25, 2023",
    "section": "Today’s theme",
    "text": "Today’s theme\n\nKeep working together on Pathways\nLearn a little about “agile” methodologies\nLearn about GitHub project boards\nco-work"
  },
  {
    "objectID": "co-work-oct-25.html#what-is-agile",
    "href": "co-work-oct-25.html#what-is-agile",
    "title": "Agile Oct 25, 2023",
    "section": "What is agile?",
    "text": "What is agile?\nA lightweight workflow structure for software development which is characterized by 4 key features.\nToday agile methodologies are the norm in software development, and are widely used for other types of project management.\nTerm is traced back to the 2001 Agile Manifesto, but the ideas are much earlier and broader."
  },
  {
    "objectID": "co-work-oct-25.html#elements",
    "href": "co-work-oct-25.html#elements",
    "title": "Agile Oct 25, 2023",
    "section": "4 elements",
    "text": "4 elements"
  },
  {
    "objectID": "co-work-oct-25.html#task-cycles",
    "href": "co-work-oct-25.html#task-cycles",
    "title": "Agile Oct 25, 2023",
    "section": "Task cycles",
    "text": "Task cycles\nA key element of agile methodologies is iterative cycles\n\nThis was popularized by the work of William Edwards Deming.\n\n1 Leading thinker in statistical quality control and industrial engineering in the 1950s to 1980s. Plan-Do-Check-Act (PDCA) cycle."
  },
  {
    "objectID": "co-work-oct-25.html#experiential-learning",
    "href": "co-work-oct-25.html#experiential-learning",
    "title": "Agile Oct 25, 2023",
    "section": "Experiential learning",
    "text": "Experiential learning\nIn “experiential learning” (David A Kolb, 1970s-1980s), the activity is the teacher via explicit periods of reflection and experimentation."
  },
  {
    "objectID": "co-work-oct-25.html#self-organizing-workflows",
    "href": "co-work-oct-25.html#self-organizing-workflows",
    "title": "Agile Oct 25, 2023",
    "section": "Self-organizing workflows",
    "text": "Self-organizing workflows\nA workflow or structure that naturally and organically improves team (or project) flow and efficiency.\n\n\nTask boards\n\nvisualize your workflow\nteam awareness\nencourages cycles of work\n\n\nFacetime\n\nshort frequent synchronous check-ins, aka “stand-ups”\nco-working, group or often paired"
  },
  {
    "objectID": "co-work-oct-25.html#task-boards-1",
    "href": "co-work-oct-25.html#task-boards-1",
    "title": "Agile Oct 25, 2023",
    "section": "Task boards",
    "text": "Task boards"
  },
  {
    "objectID": "co-work-oct-25.html#github-project-boards",
    "href": "co-work-oct-25.html#github-project-boards",
    "title": "Agile Oct 25, 2023",
    "section": "GitHub project boards",
    "text": "GitHub project boards\nLet’s start a project board with GitHub!\n\nCreate a board\nMake some issues\nAdd issues to a board"
  },
  {
    "objectID": "co-work-oct-25.html#minutes-of-co-work-time",
    "href": "co-work-oct-25.html#minutes-of-co-work-time",
    "title": "Agile Oct 25, 2023",
    "section": "30 minutes of co-work time",
    "text": "30 minutes of co-work time\n\n\nWork on Pathways\n\nIdeas for things needed to move you towards a Pathway goals\nIdentify some concrete tasks\n\n\nGitHub Project Boards\n\nPlay around\nRaise hand or post in chat for help\nMentors/helpers can go in a breakout room with you\n\n\n\nSuper ok to jump in an out of break out rooms to see what folks are talking about!\n\n\nHome"
  },
  {
    "objectID": "REST-API-feb-28.html#what-is-a-rest-api",
    "href": "REST-API-feb-28.html#what-is-a-rest-api",
    "title": "Quick Start: REST API in R",
    "section": "What is a REST API?",
    "text": "What is a REST API?\nTLDC; It is a way we can get some data off a database using an URL–if the database folk set up a REST API for us."
  },
  {
    "objectID": "REST-API-feb-28.html#example",
    "href": "REST-API-feb-28.html#example",
    "title": "Quick Start: REST API in R",
    "section": "Example",
    "text": "Example\nRepos on nmfs-opensci using the GitHub REST API\n\norg <- \"nmfs-opensci\"\nurl <- paste0(\"https://api.github.com/search/repositories?q=org:\", org)\nres <- httr::GET(url)\ndat <- jsonlite::fromJSON(rawToChar(res$content))\nhead(dat$items[,c(\"name\", \"has_issues\")])                      \n\n                     name has_issues\n1       quarto_titlepages       TRUE\n2           quarto-thesis       TRUE\n3      NOAA-quarto-simple       TRUE\n4        NOAA-quarto-book       TRUE\n5            QuartoReport       TRUE\n6 12-07-21-GitHub-Actions       TRUE"
  },
  {
    "objectID": "REST-API-feb-28.html#api-keys",
    "href": "REST-API-feb-28.html#api-keys",
    "title": "Quick Start: REST API in R",
    "section": "API Keys",
    "text": "API Keys\nThe API Key that I am showing is a public read-only API key for accessing this database.\nDon’t post or commit API Keys for private databases or a write(!!!) key."
  },
  {
    "objectID": "REST-API-feb-28.html#get-a-url-query-that-works.",
    "href": "REST-API-feb-28.html#get-a-url-query-that-works.",
    "title": "Quick Start: REST API in R",
    "section": "Get a URL query that works.",
    "text": "Get a URL query that works.\nHow? Look at the documentation, ask someone, ask the database developers. Getting that first URL is the hard part. After that you are golden.\nres <- httr::GET(\"https://api.streamnet.org/api/v1/ca.json?table_id=4EF09E86-2AA8-4C98-A983-A272C2C2C7E3&XApiKey=7A2F1EA9-4882-49E8-B23D-7DC202C2ACA5&page=1&per_page=10\")\ndata <-  jsonlite::fromJSON(rawToChar((res$content)))"
  },
  {
    "objectID": "REST-API-feb-28.html#streamnet-documentation",
    "href": "REST-API-feb-28.html#streamnet-documentation",
    "title": "Quick Start: REST API in R",
    "section": "StreamNet Documentation",
    "text": "StreamNet Documentation\nLet’s look at the StreamNet documentation https://www.streamnet.org/resources/exchange-tools/rest-api-documentation/\nStart running GET calls with URLs and see if you can figure out the syntax."
  },
  {
    "objectID": "REST-API-feb-28.html#tables",
    "href": "REST-API-feb-28.html#tables",
    "title": "Quick Start: REST API in R",
    "section": "Tables",
    "text": "Tables\nLooking at the documentation, you might guess that this gives you “tables”. Who knows what this is but let’s try it:\nres <- httr::GET(\"https://api.streamnet.org/api/v1/ca/tables.json?XApiKey=7A2F1EA9-4882-49E8-B23D-7DC202C2ACA5\")\ndata <-  jsonlite::fromJSON(rawToChar((res$content)))\nJack Pot!! The table ids that I need for my queries!"
  },
  {
    "objectID": "REST-API-feb-28.html#keeping-your-api-key-private-1",
    "href": "REST-API-feb-28.html#keeping-your-api-key-private-1",
    "title": "Quick Start: REST API in R",
    "section": "Keeping your API key private 1",
    "text": "Keeping your API key private 1\nIt is easy to keep this out of your code. Here’s how. You are going to save the key with a name in your .Renviron file in your user directory. Note you’ll need to do this on all your computers if you use multiple because the key stays on the local machine.\nNote the key is going to be in plain text. This is approach is not for sensitive keys."
  },
  {
    "objectID": "REST-API-feb-28.html#keeping-your-api-key-private-2",
    "href": "REST-API-feb-28.html#keeping-your-api-key-private-2",
    "title": "Quick Start: REST API in R",
    "section": "Keeping your API key private 2",
    "text": "Keeping your API key private 2\nThis is going to show you where .Renviron is and open it for you\ninstall.packages(\"usethis\")\nusethis::edit_r_environ() \nPaste this into the .Renviron file:\nBEST_APIKEY <- “the api key. It is long. Ask database dev for one.”"
  },
  {
    "objectID": "REST-API-feb-28.html#keeping-your-api-key-private-3",
    "href": "REST-API-feb-28.html#keeping-your-api-key-private-3",
    "title": "Quick Start: REST API in R",
    "section": "Keeping your API key private 3",
    "text": "Keeping your API key private 3\nRESTART R! You have to do this whenever you edit .Renviron\nNow whenever you need the API key in your code use\nSys.getenv(\"BEST_APIKEY\", \"\")\nFor example, here is how I could set up a url to get tables from the StreamNet REST API. Now I can share this code without sharing or exposing the API_KEY\nurl <- paste0(“https://api.streamnet.org/api/v1/ca/tables.json?XApiKey=”, Sys.getenv(\"BEST_APIKEY\", \"\"))\nres <- httr::GET(url)"
  },
  {
    "objectID": "REST-API-feb-28.html#keeping-your-api-key-private-4",
    "href": "REST-API-feb-28.html#keeping-your-api-key-private-4",
    "title": "Quick Start: REST API in R",
    "section": "Keeping your API key private 4",
    "text": "Keeping your API key private 4\nThe .Renviron file the API key is unencrypted. There are cases where you want a key to be encrypted (AWS keys, keys to get into your google drive are good examples) . Search online for how to do that. It’s the same idea though, just you are using an encrypted key rather than encrypted. In both cases, the key (or secret) stays on your local machine and is not shared in your code."
  },
  {
    "objectID": "REST-API-feb-28.html#creating-your-an-r-client",
    "href": "REST-API-feb-28.html#creating-your-an-r-client",
    "title": "Quick Start: REST API in R",
    "section": "Creating your an R client",
    "text": "Creating your an R client\nYou are ready to start creating your R package aka R REST API client! Clone someone else’s (recent) R package for a client and just edit that.\nhttps://github.com/nwfsc-math-bio/rCAX"
  },
  {
    "objectID": "REST-API-feb-28.html#rcax-key-functions",
    "href": "REST-API-feb-28.html#rcax-key-functions",
    "title": "Quick Start: REST API in R",
    "section": "rCAX key functions",
    "text": "rCAX key functions\n\nrcax_GET() - general query\nrcax_table_query() - query for a table given the tablename, makes the query list and calls rcax_GET()\nrcax_hli() - gets the tablename for a hli (high lev index), calls rcax_table_query()"
  },
  {
    "objectID": "REST-API-feb-28.html#rcax_get",
    "href": "REST-API-feb-28.html#rcax_get",
    "title": "Quick Start: REST API in R",
    "section": "rcax_GET()",
    "text": "rcax_GET()\nThis function is what prepares the url and runs the GET call to the REST API. I copied this from the ropensci/rredlist R package (R client for IUCN REST API\nThe rcax_GET.R file is a series of utility functions.\n\nrcax_GET() - uses crul package\nrcax_base() - base url to REST API\nrcax_ua() - creates a user agent string to tell REST API who is pinging it\ncheck_key() - gets the API key\nrcax_parse() - parses the JSON output"
  },
  {
    "objectID": "REST-API-feb-28.html#rcax_get-1",
    "href": "REST-API-feb-28.html#rcax_get-1",
    "title": "Quick Start: REST API in R",
    "section": "rcax_GET()",
    "text": "rcax_GET()\nrcax_GET <- function(path, key = NULL, query=NULL, ...){\n  cli <- crul::HttpClient$new(\n    url = file.path(rcax_base(), path),\n    opts = list(useragent = rcax_ua())\n  )\n  temp <- cli$get(query = c(query, list(XApiKey = check_key(key))), ...)\n  temp$raise_for_status()\n  x <- temp$parse(\"UTF-8\")\n  err_catcher(x)\n  return(x)\n}"
  },
  {
    "objectID": "REST-API-feb-28.html#filter-function-woes-1",
    "href": "REST-API-feb-28.html#filter-function-woes-1",
    "title": "Quick Start: REST API in R",
    "section": "filter function woes 1",
    "text": "filter function woes 1\nI wanted to be able to only retrieve data for a particular population, so a value in the pop_id column. There was no info, and none of the standard ways I found via online searching worked."
  },
  {
    "objectID": "REST-API-feb-28.html#filter-function-woes-2",
    "href": "REST-API-feb-28.html#filter-function-woes-2",
    "title": "Quick Start: REST API in R",
    "section": "filter function woes 2",
    "text": "filter function woes 2\nFinally in my online searches, I stumbled on the “filter” query parameter approach. I asked chatGPT, “Show me how to create a filter in a REST API query.” That got me closer, but there are still multiple way to do it. Then, I was staring at some CAX html page source code and found some Javascript (which I don’t know) with a function filter. It appeared to use “json” (which I also don’t know). Then I asked chatGPT to show me a REST API filter with JSON. Jack pot!"
  },
  {
    "objectID": "REST-API-feb-28.html#filter-function",
    "href": "REST-API-feb-28.html#filter-function",
    "title": "Quick Start: REST API in R",
    "section": "filter function",
    "text": "filter function\n\nrcax_filter() - converts a list into json, which is what this REST API wants"
  },
  {
    "objectID": "REST-API-feb-28.html#faqs-1",
    "href": "REST-API-feb-28.html#faqs-1",
    "title": "Quick Start: REST API in R",
    "section": "FAQs 1",
    "text": "FAQs 1\n\nIs this easier than using Oracle? Totally. Dead easy. You only need the URL and API Key. The database devs can set up the key however they want. The keys you’ll see today are the public and read-only key for the public database (otherwise I would not show them!).\nHow do I find out if my database has a REST API? Maybe it is on their documentation but you might just have to ask. Apparently you can set up REST API for an Oracle database? I know nothing about this, but if you struggle w getting data from an Oracle database, you might ask if they have a REST API set up."
  },
  {
    "objectID": "REST-API-feb-28.html#faqs-2",
    "href": "REST-API-feb-28.html#faqs-2",
    "title": "Quick Start: REST API in R",
    "section": "FAQs 2",
    "text": "FAQs 2\n\nHow do I find out the syntax REST API URLs? If you are lucky, the REST API for your database has documentation. Otherwise you will have to resort to trial and error or, better, reach out to the database developers. However, all you really need is 1 or 2 examples of the URL for the REST API.\nWhat there isn’t standard syntax?? Yes and No. The first part url+query params is standard, but you need to find out the query param names and the values that those can take. Filter or subsetting the data is also very idiosyncratic. Documentation is often poor, in which case you need to talk to the database devs."
  },
  {
    "objectID": "REST-API-feb-28.html#faqs-3",
    "href": "REST-API-feb-28.html#faqs-3",
    "title": "Quick Start: REST API in R",
    "section": "FAQs 3",
    "text": "FAQs 3\n\nDo I need an API key? No! Some REST APIs don’t need a key, but I think in that case, they often limit how much you can ping the database. I show an example below of using the GitHub REST API which doesn’t need a key.\nWhat’s an API key?? A kind of token. Gives you access and gives you particular permissions, like read-only, read-write, certain limit of data, etc. Where do I get it? Depends. Documentaiton should say or contact the database owners.\n\n\n\nHome"
  }
]